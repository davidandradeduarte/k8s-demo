apiVersion: v1
data:
  config.yaml: |
    logger:
      level: debug
    server:
      port: 8080
    services:
        cache:
          redis: {}
          ttl:
            success: 3600
            error: 30
          hash:
            prefix: auth
            overrides:
            - originalPath: /authenticate
              usePath: false
              headers:
              - X-Auth-Token
              queryParams:
              - apikey
        proxy:
            # Upstream targets definition, a.k.a where requests are routed to
            # Targets are used in a round robin fashion
            upstreams:
            - port: 8000
              host: localhost
kind: ConfigMap
metadata:
  name: configs-cache
  namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-sidecar
  labels:
    app: hello-sidecar
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hello-sidecar
  template:
    metadata:
      labels:
        app: hello-sidecar
    spec:
      initContainers:
      - name: init-networking
        image: marcoamador/vache-init:1.1.2
        securityContext:
            capabilities:
                add:
                - NET_ADMIN
            privileged: true
      containers:
      - name: vache-proxy
        image: marcoamador/vache:1.1.2
        volumeMounts:
        - name: configs-cache
          mountPath: /mfamador/app/configs/config.yaml
          subPath: config.yaml
        ports:
        - name: proxy-http
          containerPort: 8080
        livenessProbe:
          httpGet:
            path: "/vache/healthz"
            port: proxy-http
        readinessProbe:
          httpGet:
            path: "/vache/healthz"
            port: proxy-http
      - name: hello-sidecar
        image: marcoamador/hello:1
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
      volumes:
      - name: configs-cache
        configMap:
          name: configs-cache
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: hello-sidecar
  name: hello-sidecar
spec:
  ports:
  - port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app: hello-sidecar
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: hello-sidecar
spec:
  rules:
    - host: echo-sidecar.com
      http:
         paths:
           - path: /
             backend:
               serviceName: hello-sidecar
               servicePort: 8000
